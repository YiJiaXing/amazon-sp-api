/*
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.catalogItemsV0;

import com.amazon.xingapi.client.ApiException;
import com.amazon.xingapi.api.catalogItemsV0.CatalogApi;
import com.amazon.xingapi.model.catalogItemsV0.GetCatalogItemResponse;
import com.amazon.xingapi.model.catalogItemsV0.ListCatalogCategoriesResponse;
import com.amazon.xingapi.model.catalogItemsV0.ListCatalogItemsResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CatalogApi
 */
@Ignore
public class CatalogApiTest {

    private final CatalogApi api = new CatalogApi();

    
    /**
     * 
     *
     * Returns a specified item and its attributes.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 2 | 20 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCatalogItemTest() throws ApiException {
        String marketplaceId = null;
        String asin = null;
        GetCatalogItemResponse response = api.getCatalogItem(marketplaceId, asin);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCatalogCategoriesTest() throws ApiException {
        String marketplaceId = null;
        String ASIN = null;
        String sellerSKU = null;
        ListCatalogCategoriesResponse response = api.listCatalogCategories(marketplaceId, ASIN, sellerSKU);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value.  MarketplaceId is always required. At least one of Query, SellerSKU, UPC, EAN, ISBN, JAN is also required.  This operation returns a maximum of ten products and does not return non-buyable products.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 6 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCatalogItemsTest() throws ApiException {
        String marketplaceId = null;
        String query = null;
        String queryContextId = null;
        String sellerSKU = null;
        String UPC = null;
        String EAN = null;
        String ISBN = null;
        String JAN = null;
        ListCatalogItemsResponse response = api.listCatalogItems(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN);

        // TODO: test validations
    }
    
}
