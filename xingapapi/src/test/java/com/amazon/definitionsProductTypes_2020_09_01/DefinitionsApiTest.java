/*
 * Selling Partner API for Product Type Definitions
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).  For more information, see the [Product Type Definitions API Use Case Guide](https://github.com/amzn/selling-partner-api-docs/blob/main/guides/en-US/use-case-guides/product-type-definitions-api-use-case-guide/definitions-product-types-api-use-case-guide_2020-09-01.md).
 *
 * OpenAPI spec version: 2020-09-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.definitionsProductTypes_2020_09_01;

import com.amazon.xingapi.client.ApiException;
import com.amazon.xingapi.api.definitionsProductTypes_2020_09_01.DefinitionsApi;
import com.amazon.xingapi.model.definitionsProductTypes_2020_09_01.ErrorList;
import com.amazon.xingapi.model.definitionsProductTypes_2020_09_01.ProductTypeDefinition;
import com.amazon.xingapi.model.definitionsProductTypes_2020_09_01.ProductTypeList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefinitionsApi
 */
@Ignore
public class DefinitionsApiTest {

    private final DefinitionsApi api = new DefinitionsApi();

    
    /**
     * 
     *
     * Retrieve an Amazon product type definition.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://github.com/amzn/selling-partner-api-docs/blob/main/guides/en-US/usage-plans-rate-limits/Usage-Plans-and-Rate-Limits.md).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDefinitionsProductTypeTest() throws ApiException {
        String productType = null;
        List<String> marketplaceIds = null;
        String sellerId = null;
        String productTypeVersion = null;
        String requirements = null;
        String requirementsEnforced = null;
        String locale = null;
        ProductTypeDefinition response = api.getDefinitionsProductType(productType, marketplaceIds, sellerId, productTypeVersion, requirements, requirementsEnforced, locale);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Search for and return a list of Amazon product types that have definitions available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 5 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://github.com/amzn/selling-partner-api-docs/blob/main/guides/en-US/usage-plans-rate-limits/Usage-Plans-and-Rate-Limits.md).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchDefinitionsProductTypesTest() throws ApiException {
        List<String> marketplaceIds = null;
        List<String> keywords = null;
        ProductTypeList response = api.searchDefinitionsProductTypes(marketplaceIds, keywords);

        // TODO: test validations
    }
    
}
