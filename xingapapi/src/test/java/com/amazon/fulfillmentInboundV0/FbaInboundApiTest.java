/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.fulfillmentInboundV0;

import com.amazon.xingapi.client.ApiException;
import com.amazon.xingapi.api.fulfillmentInboundV0.FbaInboundApi;
import com.amazon.xingapi.model.fulfillmentInboundV0.ConfirmPreorderResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.ConfirmTransportResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.CreateInboundShipmentPlanRequest;
import com.amazon.xingapi.model.fulfillmentInboundV0.CreateInboundShipmentPlanResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.EstimateTransportResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.GetBillOfLadingResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.GetInboundGuidanceResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.GetLabelsResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.GetPreorderInfoResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.GetPrepInstructionsResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.GetShipmentItemsResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.GetShipmentsResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.GetTransportDetailsResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.InboundShipmentRequest;
import com.amazon.xingapi.model.fulfillmentInboundV0.InboundShipmentResponse;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import com.amazon.xingapi.model.fulfillmentInboundV0.PutTransportDetailsRequest;
import com.amazon.xingapi.model.fulfillmentInboundV0.PutTransportDetailsResponse;
import com.amazon.xingapi.model.fulfillmentInboundV0.VoidTransportResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FbaInboundApi
 */
@Ignore
public class FbaInboundApiTest {

    private final FbaInboundApi api = new FbaInboundApi();

    
    /**
     * 
     *
     * Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmPreorderTest() throws ApiException {
        String shipmentId = null;
        LocalDate needByDate = null;
        String marketplaceId = null;
        ConfirmPreorderResponse response = api.confirmPreorder(shipmentId, needByDate, marketplaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.  Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.  Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller&#39;s account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmTransportTest() throws ApiException {
        String shipmentId = null;
        ConfirmTransportResponse response = api.confirmTransport(shipmentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInboundShipmentTest() throws ApiException {
        InboundShipmentRequest body = null;
        String shipmentId = null;
        InboundShipmentResponse response = api.createInboundShipment(body, shipmentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon&#39;s fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInboundShipmentPlanTest() throws ApiException {
        CreateInboundShipmentPlanRequest body = null;
        CreateInboundShipmentPlanResponse response = api.createInboundShipmentPlan(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.  Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void estimateTransportTest() throws ApiException {
        String shipmentId = null;
        EstimateTransportResponse response = api.estimateTransport(shipmentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBillOfLadingTest() throws ApiException {
        String shipmentId = null;
        GetBillOfLadingResponse response = api.getBillOfLading(shipmentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon&#39;s fulfillment network. Sellers may still ship items that are not recommended, at their discretion.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboundGuidanceTest() throws ApiException {
        String marketplaceId = null;
        List<String> sellerSKUList = null;
        List<String> asINList = null;
        GetInboundGuidanceResponse response = api.getInboundGuidance(marketplaceId, sellerSKUList, asINList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLabelsTest() throws ApiException {
        String shipmentId = null;
        String pageType = null;
        String labelType = null;
        Integer numberOfPackages = null;
        List<String> packageLabelsToPrint = null;
        Integer numberOfPallets = null;
        Integer pageSize = null;
        Integer pageStartIndex = null;
        GetLabelsResponse response = api.getLabels(shipmentId, pageType, labelType, numberOfPackages, packageLabelsToPrint, numberOfPallets, pageSize, pageStartIndex);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPreorderInfoTest() throws ApiException {
        String shipmentId = null;
        String marketplaceId = null;
        GetPreorderInfoResponse response = api.getPreorderInfo(shipmentId, marketplaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPrepInstructionsTest() throws ApiException {
        String shipToCountryCode = null;
        List<String> sellerSKUList = null;
        List<String> asINList = null;
        GetPrepInstructionsResponse response = api.getPrepInstructions(shipToCountryCode, sellerSKUList, asINList);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShipmentItemsTest() throws ApiException {
        String queryType = null;
        String marketplaceId = null;
        OffsetDateTime lastUpdatedAfter = null;
        OffsetDateTime lastUpdatedBefore = null;
        String nextToken = null;
        GetShipmentItemsResponse response = api.getShipmentItems(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShipmentItemsByShipmentIdTest() throws ApiException {
        String shipmentId = null;
        String marketplaceId = null;
        GetShipmentItemsResponse response = api.getShipmentItemsByShipmentId(shipmentId, marketplaceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShipmentsTest() throws ApiException {
        String queryType = null;
        String marketplaceId = null;
        List<String> shipmentStatusList = null;
        List<String> shipmentIdList = null;
        OffsetDateTime lastUpdatedAfter = null;
        OffsetDateTime lastUpdatedBefore = null;
        String nextToken = null;
        GetShipmentsResponse response = api.getShipments(queryType, marketplaceId, shipmentStatusList, shipmentIdList, lastUpdatedAfter, lastUpdatedBefore, nextToken);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns current transportation information about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransportDetailsTest() throws ApiException {
        String shipmentId = null;
        GetTransportDetailsResponse response = api.getTransportDetails(shipmentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Sends transportation information to Amazon about an inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putTransportDetailsTest() throws ApiException {
        String shipmentId = null;
        PutTransportDetailsRequest body = null;
        PutTransportDetailsResponse response = api.putTransportDetails(shipmentId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates or removes items from the inbound shipment identified by the specified shipment identifier. Adding new items is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInboundShipmentTest() throws ApiException {
        InboundShipmentRequest body = null;
        String shipmentId = null;
        InboundShipmentResponse response = api.updateInboundShipment(body, shipmentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.  To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.  Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voidTransportTest() throws ApiException {
        String shipmentId = null;
        VoidTransportResponse response = api.voidTransport(shipmentId);

        // TODO: test validations
    }
    
}
