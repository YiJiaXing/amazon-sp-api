/*
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.xingapi.model.fulfillmentOutbound_2020_07_01;

import java.util.Objects;
import java.util.Arrays;
import com.amazon.xingapi.model.fulfillmentOutbound_2020_07_01.Money;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Fee type and cost.
 */
@ApiModel(description = "Fee type and cost.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-01-26T15:44:10.560+08:00")
public class Fee {
  /**
   * The type of fee.
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    FBAPERUNITFULFILLMENTFEE("FBAPerUnitFulfillmentFee"),
    
    FBAPERORDERFULFILLMENTFEE("FBAPerOrderFulfillmentFee"),
    
    FBATRANSPORTATIONFEE("FBATransportationFee"),
    
    FBAFULFILLMENTCODFEE("FBAFulfillmentCODFee");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String text) {
      for (NameEnum b : NameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("name")
  private NameEnum name = null;

  @SerializedName("amount")
  private Money amount = null;

  public Fee name(NameEnum name) {
    this.name = name;
    return this;
  }

   /**
   * The type of fee.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The type of fee.")
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }

  public Fee amount(Money amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the fee.
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "The amount of the fee.")
  public Money getAmount() {
    return amount;
  }

  public void setAmount(Money amount) {
    this.amount = amount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fee fee = (Fee) o;
    return Objects.equals(this.name, fee.name) &&
        Objects.equals(this.amount, fee.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, amount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fee {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

